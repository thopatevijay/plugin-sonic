{"version":3,"sources":["../src/actions/transferToken/transferToken.ts","../src/index.ts"],"sourcesContent":["import {\n    Content,\n    elizaLogger,\n    generateText,\n    ModelClass,\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { composeContext, generateObject } from \"@elizaos/core\";\nimport { z, type ZodType } from \"zod\";\n\nexport const TransferSchema: ZodType = z.object({\n    recipient: z.string(),\n    amount: z.string().or(z.number()),\n    tokenAddress: z.string().or(z.null()),\n});\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"BieefG47jAHCGZBxi2q87RDuHyGZyYC3vAzxpyu8pump\",\n    \"recipient\": \"9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n    \"amount\": \"1000\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested token transfer:\n- Token contract address\n- Recipient wallet address\n- Amount to transfer\n\nIf no token address is mentioned, respond with null.\n`;\n\nexport const transferToken: Action = {\n    name: \"TRANSFER_TOKEN\",\n    description: \"Transfer a token to a specific address\",\n    similes: [\"TRANSFER_TOKENS\", \"SEND_TOKENS\", \"SEND_TOKEN\", \"SEND_TOKENS_TO_ADDRESS\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.info(\"Validating transfer token action\");\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.info(\"Transferring token\");\n        elizaLogger.info(\"by assbc\");\n\n\n\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        const { object: content } = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n            schema: TransferSchema,\n        });\n\n        try {\n            // mock txn hash\n            const txnHash = \"1234567890\";\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred \\nTransaction: ${txnHash}`,\n                    content: {\n                        success: true,\n                        signature: txnHash,\n                        content: content,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error transferring token\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring token: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1000 SOL to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I want to transfer 1000 SOL to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                    action: \"TRANSFER_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully transferred 1000 SOL to 9jW8FPr6BSSsemWPV22UUCzSqkVdTp6HTyPqeqyuBbCa\",\n                },\n            },\n        ],\n    ],\n} as Action;\n","import type { Plugin } from \"@elizaos/core\";\nimport { transferToken } from \"./actions/transferToken/transferToken\";\n// interface Plugin {\n//     actions?: Action[];\n//     evaluators?: Evaluator[];\n//     services?: Service[];\n//     providers?: Provider[];\n//     initialize?(runtime: AgentRuntime): Promise<void>;\n//   }\n\nexport const sonicPlugin: Plugin = {\n    name: \"sonic\",\n    description: \"Sonic blockchain plugin for ElizaOS\",\n    actions: [\n        transferToken,\n    ],\n    clients: [],\n    adapters: [],\n    providers: [],\n};\n\nexport default sonicPlugin;"],"mappings":";AAAA;AAAA,EAEI;AAAA,EAEA;AAAA,OAMG;AACP,SAAS,gBAAgB,sBAAsB;AAC/C,SAAS,SAAuB;AAEzB,IAAM,iBAA0B,EAAE,OAAO;AAAA,EAC5C,WAAW,EAAE,OAAO;AAAA,EACpB,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC;AAAA,EAChC,cAAc,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC;AACxC,CAAC;AAED,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBlB,IAAM,gBAAwB;AAAA,EACjC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,mBAAmB,eAAe,cAAc,wBAAwB;AAAA,EAClF,UAAU,OAAO,SAAwB,YAAoB;AACzD,gBAAY,KAAK,kCAAkC;AACnD,WAAO;AAAA,EACX;AAAA,EACA,SAAS,OACL,SACA,SACA,OACA,UACA,aACmB;AACnB,gBAAY,KAAK,oBAAoB;AACrC,gBAAY,KAAK,UAAU;AAI3B,QAAI,CAAC,OAAO;AACR,cAAS,MAAM,QAAQ,aAAa,OAAO;AAAA,IAC/C,OAAO;AACH,cAAQ,MAAM,QAAQ,yBAAyB,KAAK;AAAA,IACxD;AAEA,UAAM,kBAAkB,eAAe;AAAA,MACnC;AAAA,MACA,UAAU;AAAA,IACd,CAAC;AAED,UAAM,EAAE,QAAQ,QAAQ,IAAI,MAAM,eAAe;AAAA,MAC7C;AAAA,MACA,SAAS;AAAA,MACT,YAAY,WAAW;AAAA,MACvB,QAAQ;AAAA,IACZ,CAAC;AAED,QAAI;AAEA,YAAM,UAAU;AAEhB,UAAI,UAAU;AACV,iBAAS;AAAA,UACL,MAAM;AAAA,eAA2C,OAAO;AAAA,UACxD,SAAS;AAAA,YACL,SAAS;AAAA,YACT,WAAW;AAAA,YACX;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,kBAAY,MAAM,4BAA4B,KAAK;AACnD,UAAI,UAAU;AACV,iBAAS;AAAA,UACL,MAAM,6BAA6B,KAAK;AAAA,UACxC,SAAS,EAAE,MAAa;AAAA,QAC5B,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAU;AAAA,IACN;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACvHO,IAAM,cAAsB;AAAA,EAC/B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS;AAAA,IACL;AAAA,EACJ;AAAA,EACA,SAAS,CAAC;AAAA,EACV,UAAU,CAAC;AAAA,EACX,WAAW,CAAC;AAChB;AAEA,IAAO,gBAAQ;","names":[]}