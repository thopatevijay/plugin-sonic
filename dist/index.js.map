{"version":3,"sources":["../src/actions/transferToken/transferToken.ts","../src/constant.ts","../src/providers/sonicWallet.ts","../src/actions/getBalance.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    ModelClass,\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { composeContext, generateObjectDeprecated } from \"@elizaos/core\";\nimport { TRANSFER_TEMPLATE } from \"../../constant\";\nimport { TransferContent, Transaction, TransferParams } from \"../../types\";\nimport { initializeSonicWallet } from \"../../providers/sonicWallet\";\nimport { SonicWalletManager } from \"../../providers/sonicWallet\";\nimport { Hex, formatEther, parseEther } from \"viem\";\n\nclass TransferError extends Error {\n    constructor(message: string, public readonly cause?: unknown) {\n        super(message);\n        this.name = 'TransferError';\n    }\n}\n\nclass TransferAction {\n    constructor(private readonly wallet: SonicWalletManager) { }\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        const walletClient = this.wallet.getWalletClient();\n\n        if (!walletClient.account) {\n            throw new TransferError('Wallet account not found');\n        }\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex ?? '0x',\n                chain: walletClient.chain,\n            });\n\n            elizaLogger.debug('Transaction submitted', { hash });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: params.toAddress,\n                amount: parseEther(params.amount),\n                data: params.data as Hex ?? '0x',\n                explorerTxnUrl: `${walletClient.chain?.blockExplorers?.default?.url}/tx/${hash}`,\n            };\n        } catch (error) {\n            elizaLogger.error('Transaction failed', { error, params });\n            throw new TransferError('Failed to transfer tokens', error);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n): Promise<TransferParams> => {\n    const transferContext = composeContext({\n        state,\n        template: TRANSFER_TEMPLATE,\n    });\n\n    const transferDetails = await generateObjectDeprecated({\n        runtime,\n        context: transferContext,\n        modelClass: ModelClass.LARGE,\n    }) as TransferParams;\n\n    if (!isTransferContent(runtime, transferDetails)) {\n        throw new Error(\"Invalid content for TRANSFER_TOKEN action.\");\n    }\n\n    return transferDetails;\n}\n\nfunction isTransferContent(\n    _runtime: IAgentRuntime,\n    content: unknown\n): content is TransferContent {\n    return (\n        typeof (content as TransferContent).toAddress === \"string\" &&\n        (typeof (content as TransferContent).amount === \"string\" ||\n            typeof (content as TransferContent).amount === \"number\")\n    );\n}\n\nexport const transferToken: Action = {\n    name: \"TRANSFER_TOKEN\",\n    description: \"Transfer SONIC token to a specific address\",\n    similes: [\"TRANSFER_TOKENS\", \"SEND_TOKENS\", \"SEND_TOKEN\", \"SEND_TOKENS_TO_ADDRESS\"],\n\n    validate: async (runtime: IAgentRuntime, _message: Memory): Promise<boolean> => {\n        const walletPrivateKey = runtime.getSetting(\"SONIC_WALLET_PRIVATE_KEY\");\n        if (!walletPrivateKey) {\n            elizaLogger.error(\"Validation failed: Missing SONIC_WALLET_PRIVATE_KEY\");\n            return false;\n        }\n        return true;\n    },\n    suppressInitialMessage: true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const currentState = state ?? await runtime.composeState(message);\n            const updatedState = await runtime.updateRecentMessageState(currentState);\n\n            const sonicWallet = initializeSonicWallet(runtime);\n            const action = new TransferAction(sonicWallet);\n            const transferDetails = await buildTransferDetails(updatedState, runtime);\n\n            const transferResp = await action.transfer(transferDetails);\n\n            if (callback) {\n                const formattedAmount = formatEther(transferResp.amount);\n                callback({\n                    text: [\n                        '🎯 Transaction Receipt',\n                        '------------------------',\n                        '✅ Status: Success',\n                        `Amount: ${formattedAmount} S`,\n                        `To: ${transferResp.to}`,\n                        `From: ${transferResp.from}`,\n                        `Transaction Hash: ${transferResp.hash}`,\n                        '------------------------'\n                    ].join('\\n'),\n                    content: {\n                        success: true,\n                        signature: transferResp.hash,\n                        amount: formattedAmount,\n                        recipient: transferResp.to,\n                        explorerTxnUrl: transferResp.explorerTxnUrl,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error('Handler failed', { error });\n\n            if (callback) {\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n                callback({\n                    text: `Transaction failed: ${errorMessage}`,\n                    content: { error },\n                });\n            }\n\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 0.1 S token to 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"TRANSFER_TOKEN\",\n                },\n            },\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"TRANSFER_TOKEN\",\n                },\n            },\n        ],\n    ],\n} as Action;\n","export const CHAIN_RPC_URLS = {\n    MAINNET: \"https://rpc.soniclabs.com\",\n    TESTNET: \"https://rpc.blaze.soniclabs.com\",\n} as const;\n\n\nexport const TRANSFER_TEMPLATE = `You are an AI assistant specialized in processing cryptocurrency transfer requests. Your task is to extract specific information from user messages and format it into a structured JSON response.\n\nFirst, review the recent messages from the conversation:\n\n<recent_messages>\n{{recentMessages}}\n</recent_messages>\n\nYour goal is to extract the following information about the requested transfer:\n1. Amount to transfer (in S, without the coin symbol)\n2. Recipient address (must be a valid Ethereum address)\n3. Token symbol or address (if not a native token transfer)\n\nBefore providing the final JSON output, show your reasoning process inside <analysis> tags. Follow these steps:\n\n1. Identify the relevant information from the user's message:\n   - Quote the part mentioning the amount.\n   - Quote the part mentioning the recipient address.\n   - Quote the part mentioning the token (if any).\n   \n2. Validate each piece of information:\n   - Amount: Attempt to convert the amount to a number to verify it's valid.\n   - Address: Check that it starts with \"0x\" and count the number of characters (should be 42).\n   - Token: Note whether it's a native transfer or if a specific token is mentioned.\n\n3. If any information is missing or invalid, prepare an appropriate error message.\n\n4. If all information is valid, summarize your findings.\n\n5. Prepare the JSON structure based on your analysis.\n\nAfter your analysis, provide the final output in a JSON markdown block. All fields except 'token' are required. The JSON should have this structure:\n\n\\`\\`\\`json\n{\n    \"fromChain\": string,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"token\": string | null\n}\n\\`\\`\\`\n\nRemember:\n- The amount should be a string representing the number without any currency symbol.\n- The recipient address must be a valid Ethereum address starting with \"0x\".\n- If no specific token is mentioned (i.e., it's a native token transfer), set the \"token\" field to null.\n\nNow, process the user's request and provide your response.\n`;\n","import {\n    createPublicClient,\n    createWalletClient,\n    http,\n    formatEther,\n    type PublicClient,\n    type WalletClient,\n    type Chain,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\nimport type { Provider, IAgentRuntime, Memory, State } from '@elizaos/core';\nimport { elizaLogger } from '@elizaos/core';\nimport { CHAIN_RPC_URLS } from \"../constant\";\n\nexport class SonicWalletManager {\n    private readonly account: ReturnType<typeof privateKeyToAccount>;\n    private readonly publicClient: PublicClient;\n    private readonly walletClient: WalletClient;\n\n    constructor(privateKey: string, chain: Chain) {\n        try {\n            const hexPrivateKey = this.addHexPrefix(privateKey);\n            this.account = privateKeyToAccount(hexPrivateKey);\n            const transport = http(chain.rpcUrls.default.http[0]);\n\n            this.publicClient = createPublicClient({\n                chain,\n                transport,\n            });\n\n            this.walletClient = createWalletClient({\n                account: this.account,\n                chain,\n                transport,\n            });\n        } catch (error) {\n            throw new Error(`Failed to initialize wallet: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n\n    private addHexPrefix(privateKey: string): `0x${string}` {\n        return privateKey.startsWith('0x') ? privateKey as `0x${string}` : `0x${privateKey}` as `0x${string}`;\n    }\n\n    public getAddress(): string {\n        return this.account.address;\n    }\n\n    public async getBalance(): Promise<string> {\n        try {\n            const balance = await this.publicClient.getBalance({\n                address: this.account.address,\n            });\n            return formatEther(balance);\n        } catch (error) {\n            throw new Error(`Failed to fetch balance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n\n    public getWalletClient(): WalletClient {\n        return this.walletClient;\n    }\n\n    public getNetwork(): string {\n        return this.publicClient.chain?.name ?? \"Unknown Network\";\n    }\n}\n\nfunction resolveChainFromRPCUrl(rpcUrl: string): Chain {\n    switch (rpcUrl) {\n        case CHAIN_RPC_URLS.MAINNET:\n            return viemChains.sonic;\n        case CHAIN_RPC_URLS.TESTNET:\n            return viemChains.sonicBlazeTestnet;\n        default:\n            throw new Error(`Unsupported RPC URL: ${rpcUrl}, we only support ${Object.values(CHAIN_RPC_URLS).join(', ')}`);\n    }\n}\n\nexport function initializeSonicWallet(runtime: IAgentRuntime): SonicWalletManager {\n    const privateKey = runtime.getSetting(\"SONIC_WALLET_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"SONIC_WALLET_PRIVATE_KEY is not configured\");\n    }\n\n    const rpcUrl = runtime.getSetting(\"SONIC_RPC_URL\") ?? CHAIN_RPC_URLS.MAINNET;\n    const chain = resolveChainFromRPCUrl(rpcUrl);\n\n    return new SonicWalletManager(privateKey, chain);\n}\n\nexport const sonicWalletProvider: Provider = {\n    async get(runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<string> {\n        try {\n            const wallet = initializeSonicWallet(runtime);\n            const [address, balance] = await Promise.all([\n                wallet.getAddress(),\n                wallet.getBalance()\n            ]);\n\n            const rpcUrl = runtime.getSetting(\"SONIC_RPC_URL\");\n            const network = rpcUrl === CHAIN_RPC_URLS.MAINNET ? \"Mainnet\" : \"Testnet\";\n\n            elizaLogger.info(\"📱 Sonic Wallet Status :\", {\n                address,\n                balance,\n                network\n            });\n\n            return [\n                `📱 Sonic Wallet Status:`,\n                `━━━━━━━━━━━━━━━━━━━━━`,\n                `🔑 Address: ${address}`,\n                `💰 Balance: ${balance} S`,\n                `🌐 Network: ${network}`,\n                `━━━━━━━━━━━━━━━━━━━━━`\n            ].join('\\n');\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            elizaLogger.error(\"Sonic Wallet Operation Failed:\", {\n                error: errorMessage,\n                timestamp: new Date().toISOString()\n            });\n\n            return [\n                `❌ Sonic Wallet Error:`,\n                `━━━━━━━━━━━━━━━━━━━━━`,\n                `Unable to access wallet information.`,\n                `Error: ${errorMessage}`,\n                `Please check your wallet configuration and try again.`,\n                `━━━━━━━━━━━━━━━━━━━━━`\n            ].join('\\n');\n        }\n    },\n};\n","import {\n    IAgentRuntime,\n    Memory,\n    State,\n    HandlerCallback,\n    elizaLogger,\n    Action,\n    ActionExample,\n} from \"@elizaos/core\";\nimport { initializeSonicWallet } from \"../providers/sonicWallet\";\n\nexport const getBalance: Action = {\n    name: \"GET_BALANCE\",\n    description: \"Get the balance of a specific address on the Sonic blockchain\",\n    similes: [\n        \"GET_BALANCE\",\n        \"CHECK_BALANCE\",\n        \"CHECK_BALANCE_OF\",\n        \"CHECK_BALANCE_OF_ADDRESS\",\n        \"LOOKUP_BALANCE\",\n        \"LOOKUP_BALANCE_OF\",\n        \"LOOKUP_BALANCE_OF_ADDRESS\",\n        \"LIST_BALANCE\",\n        \"LIST_BALANCE_OF\",\n        \"LIST_BALANCE_OF_ADDRESS\",\n        \"GET_BALANCE_OF\",\n        \"GET_BALANCE_OF_ADDRESS\",\n        \"GET_BALANCE_OF_WALLET\",\n        \"GET_BALANCE_OF_WALLET_ADDRESS\",\n    ],\n    validate: async (runtime: IAgentRuntime, message: Memory, callback?: HandlerCallback) => {\n        elizaLogger.info(\"Validating get balance action\");\n        const sonicWallet = initializeSonicWallet(runtime);\n        if (!sonicWallet) {\n            elizaLogger.error(\"Failed to initialize Sonic wallet\");\n            if (callback) {\n                callback({\n                    text: \"Failed to initialize Sonic wallet\",\n                    content: { error: \"Failed to initialize Sonic wallet\" },\n                });\n            }\n            return false;\n        }\n        return true;\n    },\n    suppressInitialMessage: true,\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.info(\"Getting balance\");\n\n        let currentState: State;\n        if (!state) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(state);\n        }\n\n        try {\n            const sonicWallet = initializeSonicWallet(runtime);\n            if (!sonicWallet) {\n                elizaLogger.error(\"Failed to initialize Sonic wallet\");\n                if (callback) {\n                    callback({\n                        text: \"Failed to initialize Sonic wallet\",\n                        content: { error: \"Failed to initialize Sonic wallet\" },\n                    });\n                }\n                return false;\n            }\n\n            const balance = await sonicWallet.getBalance();\n\n            const constructResponse = `\n            Address: ${sonicWallet.getAddress()}\n            Balance: ${balance} S\n            Network: ${sonicWallet.getNetwork()}\n            `;\n\n            if (callback) {\n                callback({\n                    text: constructResponse,\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error getting balance\", error);\n            if (callback) {\n                callback({\n                    text: `Error getting balance: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of SONIC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of SONIC\",\n                    action: \"GET_BALANCE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show my balance\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check SONIC balance...\",\n                    action: \"GET_BALANCE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my wallet balance on SONIC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your wallet balance on SONIC\",\n                    action: \"GET_BALANCE\",\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What is my balance?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance...\",\n                },\n            }\n        ],\n    ] as ActionExample[][],\n} as Action;","import type { Plugin } from \"@elizaos/core\";\nimport { getBalance, transferToken } from \"./actions\";\nimport { sonicWalletProvider } from \"./providers/sonicWallet\";\n\nexport const sonicPlugin: Plugin = {\n    name: \"sonic\",\n    description: \"Sonic blockchain plugin for ElizaOS\",\n    actions: [\n        transferToken,\n        getBalance,\n    ],\n    clients: [],\n    adapters: [],\n    providers: [sonicWalletProvider],\n};\n\nexport default sonicPlugin;"],"mappings":"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","names":["elizaLogger","formatEther","elizaLogger","elizaLogger","elizaLogger"]}