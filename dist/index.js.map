{"version":3,"sources":["../src/actions/transferToken/transferToken.ts","../src/constant.ts","../src/actions/getBalance.ts","../src/providers/sonicWallet.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    ModelClass,\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport { composeContext, generateObjectDeprecated } from \"@elizaos/core\";\nimport { ethers } from \"ethers\";\nimport { DEFAULT_SONIC_RPC_URL, TRANSFER_TEMPLATE } from \"../../constant\";\nimport { TransferContent } from \"../../types\";\n\nasync function transferSimpleToken(\n    runtime: IAgentRuntime,\n    recipient: string,\n    amount: string\n): Promise<string | undefined> {\n    const sonicRPCUrl = runtime.getSetting(\"SONIC_RPC_URL\") as string || DEFAULT_SONIC_RPC_URL;\n    const walletPrivateKey = runtime.getSetting(\"SONIC_WALLET_PRIVATE_KEY\") as string;\n    const provider = new ethers.JsonRpcProvider(sonicRPCUrl);\n    const wallet = new ethers.Wallet(walletPrivateKey, provider);\n\n    const recipientAddress = recipient;\n    const amountToTransfer = ethers.parseEther(amount);\n\n    try {\n        // create txn object\n        const txn = {\n            to: recipientAddress,\n            value: amountToTransfer,\n            gasLimit: 21000,\n        }\n\n        // send the transaction\n        const tx = await wallet.sendTransaction(txn);\n        elizaLogger.info(\"Transaction sent:\", tx);\n\n        // wait for the transaction to be mined\n        const receipt = await tx.wait();\n\n        elizaLogger.info(\"Transaction successful:\", receipt);\n        return receipt?.hash ?? \"\";\n    } catch (error) {\n        elizaLogger.error(\"Error transferring token\", error);\n        throw error;\n    }\n}\n\nfunction isTransferContent(\n    _runtime: IAgentRuntime,\n    content: unknown\n): content is TransferContent {\n    return (\n        typeof (content as TransferContent).recipient === \"string\" &&\n        (typeof (content as TransferContent).amount === \"string\" ||\n            typeof (content as TransferContent).amount === \"number\")\n    );\n}\n\nexport const transferToken: Action = {\n    name: \"TRANSFER_TOKEN\",\n    description: \"Transfer SONIC token to a specific address\",\n    similes: [\"TRANSFER_TOKENS\", \"SEND_TOKENS\", \"SEND_TOKEN\", \"SEND_TOKENS_TO_ADDRESS\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.info(\"Validating transfer token action\");\n        // Check if SONIC_WALLET_PRIVATE_KEY is provided\n        const walletPrivateKey = runtime.getSetting(\"SONIC_WALLET_PRIVATE_KEY\") as string;\n        if (!walletPrivateKey) {\n            elizaLogger.error(\"Missing SONIC_WALLET_PRIVATE_KEY\");\n            return false;\n        }\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.info(\"Transferring token\");\n\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const transferContext = composeContext({\n            state,\n            template: TRANSFER_TEMPLATE,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const txnHash = await transferSimpleToken(\n                runtime,\n                content.recipient,\n                content.amount.toString(),\n            );\n\n            if (!txnHash) {\n                elizaLogger.error(\"Error transferring token\");\n                if (callback) {\n                    callback({\n                        success: false,\n                        text: `Error transferring token`,\n                        content: { error: \"Error transferring token\" },\n                    });\n                }\n                return false;\n            }\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${content.amount} to ${content.recipient} \\nTransaction: ${txnHash}`,\n                    content: {\n                        success: true,\n                        signature: txnHash,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error transferring token\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring token: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 0.1 S token to 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"TRANSFER_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I want to transfer 1 SONIC token to 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"TRANSFER_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 0.1 S token to 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                },\n            },\n        ],\n    ],\n} as Action;\n","export const DEFAULT_SONIC_RPC_URL = \"https://rpc.blaze.soniclabs.com\";\n\nexport const CHAIN_RPC_URLS = {\n    MAINNET: \"https://rpc.soniclabs.com\",\n    TESTNET: \"https://rpc.blaze.soniclabs.com\",\n} as const;\n\n\nexport const TRANSFER_TEMPLATE = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n    \"amount\": \"1.5\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested token transfer:\n- Recipient address (Sonic wallet address)\n- Amount to transfer\n- Token contract address (null for native SONIC transfers, Sonic native token is \"S\")\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n\nexport const GET_BALANCE_TEMPLATE = `\nGiven the recent messages and wallet information below:\n\nExample response:\n\\`\\`\\`json\n{\n    \"address\": \"B62qkGSBuLmqYApYoWTmAzUtwFVx6Fe9ZStJVPzCwLjWZ5NQDYTiqEU\",\n    \"balance\": \"100\" // balance in SONIC\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested Balance request:\n- Address to check balance for.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n`;","import {\n    IAgentRuntime,\n    Memory,\n    State,\n    HandlerCallback,\n    elizaLogger,\n    Action,\n    composeContext,\n    ModelClass,\n    generateObjectDeprecated,\n    ActionExample,\n} from \"@elizaos/core\";\nimport { ethers } from \"ethers\";\nimport { DEFAULT_SONIC_RPC_URL, GET_BALANCE_TEMPLATE } from \"../constant\";\nimport { BalanceContent } from \"../types\";\n\nfunction isBalanceContent(\n    _runtime: IAgentRuntime,\n    content: unknown\n): content is BalanceContent {\n    return typeof (content as BalanceContent).address === \"string\";\n}\n\nexport const getBalance: Action = {\n    name: \"GET_BALANCE\",\n    description: \"Get the balance of a specific address on the Sonic blockchain\",\n    similes: [\n        \"GET_BALANCE\",\n        \"CHECK_BALANCE\",\n        \"CHECK_BALANCE_OF\",\n        \"CHECK_BALANCE_OF_ADDRESS\",\n        \"LOOKUP_BALANCE\",\n        \"LOOKUP_BALANCE_OF\",\n        \"LOOKUP_BALANCE_OF_ADDRESS\",\n        \"LIST_BALANCE\",\n        \"LIST_BALANCE_OF\",\n        \"LIST_BALANCE_OF_ADDRESS\",\n        \"GET_BALANCE_OF\",\n        \"GET_BALANCE_OF_ADDRESS\",\n        \"GET_BALANCE_OF_WALLET\",\n        \"GET_BALANCE_OF_WALLET_ADDRESS\",\n    ],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.info(\"Validating get balance action\");\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.info(\"Getting balance\");\n\n        let currentState: State;\n        if (!state) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(state);\n        }\n\n        const balanceContext = composeContext({\n            state: currentState,\n            template: GET_BALANCE_TEMPLATE,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: balanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        if (!isBalanceContent(runtime, content) || !content.address || content.address === \"{{walletAddress}}\") {\n            elizaLogger.error(\"No wallet address provided for GET_BALANCE action.\");\n            if (callback) {\n                callback({\n                    text: \"I need a wallet address to check the balance. Please provide a wallet address.\",\n                    content: { error: \"Missing wallet address\" },\n                });\n            }\n            return false;\n        }\n\n        const sonicRPCUrl = runtime.getSetting(\"SONIC_RPC_URL\") as string || DEFAULT_SONIC_RPC_URL;\n\n        try {\n            const provider = new ethers.JsonRpcProvider(sonicRPCUrl);\n            const walletAddress = content.address;\n            const balance = await provider.getBalance(walletAddress);\n            const balanceInSonic = ethers.formatEther(balance);\n\n            if (callback) {\n                callback({\n                    text: `Balance: ${balanceInSonic} S`,\n                    content: { balance: balanceInSonic },\n                });\n            }\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error getting balance\", error);\n            if (callback) {\n                callback({\n                    text: `Error getting balance: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of SONIC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of SONIC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        address: \"{{walletAddress}}\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my balance of token 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your balance of token 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        address: \"{{walletAddress}}\",\n                        token: \"0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Get SONIC balance of 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check SONIC balance of 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        address: \"0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my wallet balance on SONIC\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check your wallet balance on SONIC\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        address: \"{{walletAddress}}\",\n                    },\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What is my balance?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I need a wallet address to check the balance. Please provide a wallet address.\",\n                    content: { error: \"Missing wallet address\" },\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What is my balance?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I need a wallet address to check the balance. Please provide a wallet address.\",\n                    content: { error: \"Missing wallet address\" },\n                },\n            },\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"My wallet address is 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you check the balance for 0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        address: \"0x5C951583CEb79828b1fAB7257FE497A9Dc5896e6\",\n                    },\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check balance\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I need a wallet address to check the balance. Please provide a wallet address.\",\n                    content: { error: \"Missing wallet address\" },\n                },\n            }\n        ]\n    ] as ActionExample[][],\n} as Action;","import {\n    createPublicClient,\n    createWalletClient,\n    http,\n    formatEther,\n    type PublicClient,\n    type WalletClient,\n    type Chain,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\nimport type { Provider, IAgentRuntime, Memory, State } from '@elizaos/core';\nimport { elizaLogger } from '@elizaos/core';\nimport { CHAIN_RPC_URLS } from \"../constant\";\n\nclass SonicWalletManager {\n    private readonly account: ReturnType<typeof privateKeyToAccount>;\n    private readonly publicClient: PublicClient;\n    private readonly walletClient: WalletClient;\n\n    constructor(privateKey: string, chain: Chain) {\n        try {\n            const hexPrivateKey = this.addHexPrefix(privateKey);\n            this.account = privateKeyToAccount(hexPrivateKey);\n            const transport = http(chain.rpcUrls.default.http[0]);\n\n            this.publicClient = createPublicClient({\n                chain,\n                transport,\n            });\n\n            this.walletClient = createWalletClient({\n                account: this.account,\n                chain,\n                transport,\n            });\n        } catch (error) {\n            throw new Error(`Failed to initialize wallet: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n\n    private addHexPrefix(privateKey: string): `0x${string}` {\n        return privateKey.startsWith('0x') ? privateKey as `0x${string}` : `0x${privateKey}` as `0x${string}`;\n    }\n\n    public getAddress(): string {\n        return this.account.address;\n    }\n\n    public async getBalance(): Promise<string> {\n        try {\n            const balance = await this.publicClient.getBalance({\n                address: this.account.address,\n            });\n            return formatEther(balance);\n        } catch (error) {\n            throw new Error(`Failed to fetch balance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n\n    public getWalletClient(): WalletClient {\n        return this.walletClient;\n    }\n}\n\nfunction resolveChainFromRPCUrl(rpcUrl: string): Chain {\n    switch (rpcUrl) {\n        case CHAIN_RPC_URLS.MAINNET:\n            return viemChains.sonic;\n        case CHAIN_RPC_URLS.TESTNET:\n            return viemChains.sonicBlazeTestnet;\n        default:\n            throw new Error(`Unsupported RPC URL: ${rpcUrl}, we only support ${Object.values(CHAIN_RPC_URLS).join(', ')}`);\n    }\n}\n\nfunction initializeSonicWallet(runtime: IAgentRuntime): SonicWalletManager {\n    const privateKey = runtime.getSetting(\"SONIC_WALLET_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"SONIC_WALLET_PRIVATE_KEY is not configured\");\n    }\n\n    const rpcUrl = runtime.getSetting(\"SONIC_RPC_URL\") ?? CHAIN_RPC_URLS.MAINNET;\n    const chain = resolveChainFromRPCUrl(rpcUrl);\n\n    return new SonicWalletManager(privateKey, chain);\n}\n\nexport const sonicWalletProvider: Provider = {\n    async get(runtime: IAgentRuntime, _message: Memory, _state?: State): Promise<string> {\n        try {\n            const wallet = initializeSonicWallet(runtime);\n            const address = wallet.getAddress();\n            const balance = await wallet.getBalance();\n            elizaLogger.info(\"Sonic Wallet\", { address, balance });\n\n            return [\n                'Sonic Wallet',\n                `Address: ${address}`,\n                `Balance: ${balance} S`,\n            ].join('\\n');\n        } catch (error) {\n            elizaLogger.error(\"Wallet operation failed:\", error);\n            return `Failed to access wallet information: ${error instanceof Error ? error.message : 'Unknown error'}`;\n        }\n    },\n};\n","import type { Plugin } from \"@elizaos/core\";\nimport { getBalance, transferToken } from \"./actions\";\nimport { sonicWalletProvider } from \"./providers/sonicWallet\";\n\nexport const sonicPlugin: Plugin = {\n    name: \"sonic\",\n    description: \"Sonic blockchain plugin for ElizaOS\",\n    actions: [\n        transferToken,\n        getBalance,\n    ],\n    clients: [],\n    adapters: [],\n    providers: [sonicWalletProvider],\n};\n\nexport default sonicPlugin;"],"mappings":"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","names":["elizaLogger","composeContext","ModelClass","generateObjectDeprecated","ethers","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","ethers","elizaLogger","elizaLogger"]}